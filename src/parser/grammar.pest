
template = {
    SOI ~
    node* ~
    EOI
}

node = {
    raw_variable_block |
    variable_block |
    text
}

text = { (!(block_start) ~ ANY) + }

block_start = { raw_variable_block_start | variable_block_start }

variable_block = { variable_block_start ~ ws ~ identifier ~ ws ~ (filter)* ~ variable_block_end }
variable_block_start = _{ "{{" }
variable_block_end   = _{ "}}" }

raw_variable_block = { raw_variable_block_start ~ ws ~ identifier ~ ws ~ (filter)* ~ raw_variable_block_end }
raw_variable_block_start = _{ "{{{" }
raw_variable_block_end   = _{ "}}}" }

filter = { filter_leader ~ ws ~ identifier ~ (filter_args)? ~ ws }
filter_leader = _{ "|" }

filter_args = { filter_arg_start ~ ws ~ (filter_arg)* ~ ws ~ filter_arg_end }
filter_arg = { value ~ (filter_arg_separator)? ~ ws }
filter_arg_separator = _{ ws ~ "," ~ ws }
filter_arg_start = _{ "(" }
filter_arg_end   = _{ ")" }

identifier = { identifier_leader ~ (identifier_follower)* }
identifier_leader = _{ ASCII_ALPHA }
identifier_follower = _{ ASCII_ALPHA | ASCII_DIGIT | "_" }

value = { i32 | string }

i32 = { (ASCII_DIGIT)+ ~ (i32_suffix)? }
i32_suffix = _{ "i32" }

string = {
    double_quoted_string_bound ~
    double_quoted_string_contents ~
    double_quoted_string_bound
    |
    single_quoted_string_bound ~
    single_quote_string_contents ~
    single_quoted_string_bound
}

double_quoted_string_contents = { (!(double_quoted_string_bound) ~ ANY)* }
double_quoted_string_bound = _{ "\"" }

single_quote_string_contents = { (!(single_quoted_string_bound) ~ ANY)* }
single_quoted_string_bound = _{ "'" }

/// OPERATORS
op_or        = @{ "||" ~ ws }
op_and       = @{ "&&" ~ ws }
op_not       = @{ "!" ~ ws }
op_lte       = { "<=" }
op_gte       = { ">=" }
op_lt        = { "<" }
op_gt        = { ">" }
op_eq        = { "==" }
op_ineq      = { "!=" }
op_plus      = { "+" }
op_minus     = { "-" }
op_times     = { "*" }
op_slash     = { "/" }
op_modulo    = { "%" }

boolean = { "true" | "false"}

ws = _{ (" " | "\t" | "\r" | "\n")* }

