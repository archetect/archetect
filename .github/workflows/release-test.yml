name: test release

# Only do the release on x.y.z tags.
on:
  push:
    tags:
      - '**'

# We need this to be able to create releases.
permissions:
  contents: write

jobs:
  # The create-release job runs purely to initialize the GitHub release itself,
  # and names the release after the `x.y.z` tag that was pushed. It's separate
  # from building the release so that we only create the release once.
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"${VERSION:1}\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}



  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
      TARGET_DIR: ./target
      BINARY: archetect

    strategy:
      fail-fast: false
      matrix:
        platform: [linux, osx, windows]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            strip: x86_64-linux-musl-strip
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - build: windows
            os: windows-latest
            rust: stable
            target: i686-pc-windows-msvc

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run Cargo Build (Release)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release


      - name: Strip Release Binary (linux and macos)
        if: matrix.platform == 'linux' || matrix.platform == 'macos'
        run: strip "target/release/${{ env.BINARY }}"

      - name: Determine Archive Name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=${{ env.BINARY }}-$version-${{ matrix.target }}" >> $GITHUB_ENV

      - name: Build archive
        shell: bash
        run: |
          outdir="${{ env.TARGET_DIR }}"
          staging="${{ env.BINARY }}_${{ env.RELEASE_VERSION }}_${{ matrix.platform }}-x64"
          mkdir -p "$staging"
          if [ "${{ matrix.platform }}" = "windows" ]; then
            cp "target/release/${{ env.BINARY }}.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "target/release/${{ env.BINARY }}" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
