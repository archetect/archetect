name: Release

on:
  push:
    tags:
      - '**'

permissions:
  contents: write

jobs:
  # Create a draft release placeholder for each build to publish to
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Check that tag version and Cargo.toml version are the same
        shell: bash
        run: |
          if ! grep -q "version = \"${VERSION:1}\"" Cargo.toml; then
            echo "version does not match Cargo.toml" >&2
            exit 1
          fi
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}



  build-release:
    name: build-release
    needs: [ 'create-release' ]
    env:
      RUST_BACKTRACE: 1
      TARGET_DIR: ./target
      BINARY: archetect
      OPENSSL_STATIC: 1

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            arch: x64
          - platform: macos
            os: macos-latest
            rust: stable
            arch: aarch64
          - platform: windows
            os: windows-latest
            rust: stable
            arch: x64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Protoc
        run: apt install -y protobuf-compiler

      - name: Build release binary
        shell: bash
        run: |
          cargo build --verbose --release
          if [ "${{ matrix.platform }}" = "windows" ]; then
            bin="target/release/${{ env.BINARY}}.exe"
          else
            bin="target/release/${{ env.BINARY }}"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV

      - name: Strip Release Binary (linux and macos)
        if: matrix.platform == 'linux' || matrix.platform == 'macos'
        run: strip "$BIN"

      - name: Determine Archive Name
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          echo "ARCHIVE=${{ env.BINARY }}-$version-${{ matrix.platform }}_${{ matrix.arch }}" >> $GITHUB_ENV

      - name: Creating Archive Directory
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"/
          cp "$BIN" "$ARCHIVE"/
          cp {README.md,LICENSE} "$ARCHIVE"/

      - name: Build Archive
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "windows" ]; then
            7z a "$ARCHIVE.zip" "$ARCHIVE"
            certutil -hashfile "$ARCHIVE.zip" SHA256 > "$ARCHIVE.zip.sha256"
            echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV
            echo "ASSET_SUM=$ARCHIVE.zip.sha256" >> $GITHUB_ENV
          else
            tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
            shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
            echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
            echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV
          fi

      - name: Upload Release Archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" ${{ env.ASSET }} ${{ env.ASSET_SUM }}
